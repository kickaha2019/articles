Text:
	I use Apple's ''Notes'' to keep structured notes in. I use ''Notes''
  in preference to other personal management software because it is
  free, and the replication between the Mac and iPad and iPhone works
  pretty well, and it has enough features for me.
  
  One downside of ''Notes'' is how to backup the data in it. If the data
  in ''Notes'' is local to the Mac then one can find a ''sqlite3'' database
  buried inside ''~/Library/Containers/com.apple.Notes''. But that doesn't
  contain the data held in iCloud. So getting worried about accidentally
  losing data in ''Notes'' I decided I had to script something.
  
  The approach I took was to use ''Applescript'' to extract the raw
  structure of the folders and notes inside ''Notes'', and also to
  save each note as a PDF file. Then to run a ''Ruby'' script to convert the
  raw structure into a directory structure mimicking what was in ''Notes''.
  Someone more proficient in ''Applescript'' could have done it all
  in ''Applescript'', and made the script more robust.
  
  It takes a while to run, and while the ''Applescript''
  code is running it's not safe to touch the mouse or keyboard.
  The Terminal application needs to be granted permissions in
  ''System Preferences / Security & Privacy / Accessibility / Privacy''
  to control the computer (I run everything from a shell script).
  
  For reference only here is the Applescript I use, before it is run
  any PDF files need to be deleted from /tmp, and the data is saved
  to /tmp.
  
Code:
  on openFile(theFile)
    set theFile to (POSIX file theFile) as string
    set theOpenedFile to open for access file theFile with write permission
    set eof of theOpenedFile to 0
    return theOpenedFile
  end openFile

  try
    -- Open output files
    set folderList to openFile("/tmp/folders.txt")
    set folder2folders to openFile("/tmp/folder2folders.txt")
    set folder2notes to openFile("/tmp/folder2notes.txt")
    set noteList to openFile("/tmp/notes.txt")
    set note2body to openFile("/tmp/note2body.txt")
    
    tell application "Notes"
      activate
      
      repeat with folderIndex from 1 to (count of folders)
        set f to folder folderIndex
        set folderId to ((id of f) as string)
        write (folderId & space & ((name of f) as string) & return & linefeed) to folderList
        
        repeat with childIndex from 1 to (count of folders in f)
          write (folderId & space & ((id of folder childIndex in f) as string) & return & linefeed) to folder2folders
        end repeat
        
        repeat with childIndex from 1 to (count of notes in f)
          write (folderId & space & ((id of note childIndex in f) as string) & return & linefeed) to folder2notes
        end repeat
      end repeat
      
      repeat with noteIndex from 1 to (count of notes)
        set n to note noteIndex
        set noteId to ((id of n) as string)
        write (noteId & space & ((name of n) as string) & return & linefeed) to noteList
        write (noteId & space & ((body of n) as string) & return & linefeed) to note2body
        tell n
          show
        end tell
        
        tell application "System Events"
          tell process "Notes"
            set frontmost to true
            
            -- open Save to PDF dialog
            click (first menu item of menu "File" of menu bar 1 whose name begins with "Export as PDF")
            
            -- Let's make sure our save dialog is up
            repeat until exists sheet 1 of window "Notes"
              delay 0.2
            end repeat
            set sheet1 to sheet 1 of window "Notes"
            
            -- Set directory to export to
            set value of text field 1 of sheet1 to ("")
            keystroke "/"
            delay 1
            keystroke "tmp"
            keystroke return
            delay 0.5
            
            --Set file to export to
            set value of text field 1 of sheet1 to ((noteIndex as string) & ".pdf")
            
            -- Now click the Save button
            click button "Save" of sheet1
          end tell
        end tell
      end repeat
      
      close access folderList
      close access folder2folders
      close access folder2notes
      close access noteList
      close access note2body
      
    end tell
  on error errortext
    display dialog errortext
    
    close access folderList
    close access folder2folders
    close access folder2notes
    close access noteList
    close access note2body
    
    error number -128
  end try
